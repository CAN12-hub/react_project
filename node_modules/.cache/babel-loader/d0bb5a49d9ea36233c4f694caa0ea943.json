{"ast":null,"code":"var _jsxFileName = \"/Users/chetnaajaynainani/Desktop/cc/pages/src/pages/chart.js\";\nimport { useEffect, useState } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { format } from 'date-fns';\nimport Post from \"../components/Post\";\nimport React from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n/*const Chart = () => {\n  const [setCharts] = useState([]);\n  const [loading, setLoading] = useState(true);\n\t\n\tuseEffect(() => {\n    fetch(\"https://workers.cnainani.workers.dev/attack-layer3\", { mode: \"cors\" })\n      .then((response) => {\n        console.log(\"response is:\"+response);\n        return response.json();\n      })\n      .then((data) => {\n        //setCharts(data);\n        //setLoading(false);\n        //console.log(data);\n        //console.log(\"meta is:\"+ JSON.stringify(data.data.meta));\n        let startTime=data.data.meta.dateRange.startTime.split('T')[0]+'\"';\n        let endTime=data.data.meta.dateRange.endTime.split('T')[0]+'\"';\n        //console.log(\"startTime:\"+ startTime.split('T')[0]+'\"');\n        //console.log(\"endTime is:\"+endTime.split('T')[0]+'\"');\n        console.log(\"getDates is:\"+getDaysArray(startTime,endTime));\n       // console.log(\"formatted start date is:\"+ formatDate(startTime));\n       // console.log(\"formatted end date is:\"+ formatDate(endTime));\n        \n      });\n\n      function formatDate(string){\n        var options = { year: 'numeric', month: 'long', day: 'numeric' };\n        return new Date(string).toLocaleDateString([],options);\n    }\n\n      var getDaysArray = function(start, end) {\n        for(var arr=[],dt=new Date(start); \n          dt<=new Date(end); \n          dt.setDate(dt.getDate()+1)){\n            console.log(\"date pushed is:\"+ format(new Date(dt), 'MM/dd/yyyy'));\n            arr.push(format(new Date(dt), 'MM/dd/yyyy'));\n        }\n        console.log(\"array is:\"+arr);\n        return arr;\n    };\n\n  });\n\n  if (loading) {\n    return <Container>loading screen</Container>;\n  }\n  return (\n    <Container>\n      {posts.map((e) => (\n        <Post data={e}></Post>\n      ))}\n    </Container>\n  );\n};*/\n\nconst Chart2 = () => {\n  var arrChart = [];\n  var data;\n  var labels;\n  const options = {\n    responsive: true,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Chart.js Line Chart'\n      }\n    }\n  };\n  fetch(\"https://workers.cnainani.workers.dev/attack-layer3\", {\n    mode: \"cors\"\n  }).then(response => {\n    console.log(\"response is:\" + response);\n    return response.json();\n  }).then(dataRes => {\n    let startTime = dataRes.data.meta.dateRange.startTime.split('T')[0] + '\"';\n    let endTime = dataRes.data.meta.dateRange.endTime.split('T')[0] + '\"';\n    arrChart = getDaysArray(startTime, endTime);\n    labels = [arrChart];\n    console.log(\"lables are:\" + arrChart);\n    data = {\n      labels,\n      datasets: [{\n        label: 'Dataset 1',\n        data: labels.map(() => 500),\n        borderColor: 'rgb(255, 99, 132)',\n        backgroundColor: 'rgba(255, 99, 132, 0.5)'\n      }, {\n        label: 'Dataset 2',\n        data: labels.map(() => 100),\n        borderColor: 'rgb(53, 162, 235)',\n        backgroundColor: 'rgba(53, 162, 235, 0.5)'\n      }]\n    };\n    console.log(\"data inside is:\" + JSON.stringify(data));\n    //return <Line options={options} data={data} />;\n  });\n\n  var getDaysArray = function (start, end) {\n    for (var arr = [], dt = new Date(start); dt <= new Date(end); dt.setDate(dt.getDate() + 1)) {\n      console.log(\"date pushed is:\" + format(new Date(dt), 'MM/dd/yyyy'));\n      arr.push(format(new Date(dt), 'MM/dd/yyyy'));\n    }\n    console.log(\"array is:\" + arr);\n    return arr;\n  };\n  if (data != undefined) {\n    console.log(\"data is:\" + data);\n    return /*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 12\n    }, this);\n  } else {\n    return null;\n  }\n};\n_c = Chart2;\nexport default Chart2;\nvar _c;\n$RefreshReg$(_c, \"Chart2\");","map":{"version":3,"names":["useEffect","useState","Container","format","Post","React","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","register","Chart2","arrChart","data","labels","options","responsive","plugins","title","display","text","fetch","mode","then","response","console","log","json","dataRes","startTime","meta","dateRange","split","endTime","getDaysArray","datasets","label","map","borderColor","backgroundColor","JSON","stringify","start","end","arr","dt","Date","setDate","getDate","push","undefined"],"sources":["/Users/chetnaajaynainani/Desktop/cc/pages/src/pages/chart.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { format } from 'date-fns'\nimport Post from \"../components/Post\";\nimport React from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n/*const Chart = () => {\n  const [setCharts] = useState([]);\n  const [loading, setLoading] = useState(true);\n\t\n\tuseEffect(() => {\n    fetch(\"https://workers.cnainani.workers.dev/attack-layer3\", { mode: \"cors\" })\n      .then((response) => {\n        console.log(\"response is:\"+response);\n        return response.json();\n      })\n      .then((data) => {\n        //setCharts(data);\n        //setLoading(false);\n        //console.log(data);\n        //console.log(\"meta is:\"+ JSON.stringify(data.data.meta));\n        let startTime=data.data.meta.dateRange.startTime.split('T')[0]+'\"';\n        let endTime=data.data.meta.dateRange.endTime.split('T')[0]+'\"';\n        //console.log(\"startTime:\"+ startTime.split('T')[0]+'\"');\n        //console.log(\"endTime is:\"+endTime.split('T')[0]+'\"');\n        console.log(\"getDates is:\"+getDaysArray(startTime,endTime));\n       // console.log(\"formatted start date is:\"+ formatDate(startTime));\n       // console.log(\"formatted end date is:\"+ formatDate(endTime));\n        \n      });\n\n      function formatDate(string){\n        var options = { year: 'numeric', month: 'long', day: 'numeric' };\n        return new Date(string).toLocaleDateString([],options);\n    }\n\n      var getDaysArray = function(start, end) {\n        for(var arr=[],dt=new Date(start); \n          dt<=new Date(end); \n          dt.setDate(dt.getDate()+1)){\n            console.log(\"date pushed is:\"+ format(new Date(dt), 'MM/dd/yyyy'));\n            arr.push(format(new Date(dt), 'MM/dd/yyyy'));\n        }\n        console.log(\"array is:\"+arr);\n        return arr;\n    };\n\n  });\n\n  if (loading) {\n    return <Container>loading screen</Container>;\n  }\n  return (\n    <Container>\n      {posts.map((e) => (\n        <Post data={e}></Post>\n      ))}\n    </Container>\n  );\n};*/\n\n\nconst Chart2 = () => {\n  var arrChart=[];\n  var data;\n  var labels;\n  const options = {\n   responsive: true,\n   plugins: {\n     title: {\n       display: true,\n       text: 'Chart.js Line Chart',\n     },\n   },\n };\n  fetch(\"https://workers.cnainani.workers.dev/attack-layer3\", { mode: \"cors\" })\n  .then((response) => {\n    console.log(\"response is:\"+response);\n    return response.json();\n  })  \n  .then((dataRes) => {\n      let startTime=dataRes.data.meta.dateRange.startTime.split('T')[0]+'\"';\n      let endTime=dataRes.data.meta.dateRange.endTime.split('T')[0]+'\"';\n      arrChart=getDaysArray(startTime,endTime);\n      labels = [arrChart];\n      console.log(\"lables are:\"+arrChart);\n      data = {\n        labels,\n        datasets: [\n          {\n            label: 'Dataset 1',\n            data: labels.map(() => 500),\n            borderColor: 'rgb(255, 99, 132)',\n            backgroundColor: 'rgba(255, 99, 132, 0.5)',\n          },\n          {\n            label: 'Dataset 2',\n            data: labels.map(() => 100),\n            borderColor: 'rgb(53, 162, 235)',\n            backgroundColor: 'rgba(53, 162, 235, 0.5)',\n          },\n        ],\n      };\n      console.log(\"data inside is:\"+JSON.stringify(data));\n      //return <Line options={options} data={data} />;\n  });\n  var getDaysArray = function(start, end) {\n      for(var arr=[],dt=new Date(start); \n        dt<=new Date(end); \n        dt.setDate(dt.getDate()+1)){\n          console.log(\"date pushed is:\"+ format(new Date(dt), 'MM/dd/yyyy'));\n          arr.push(format(new Date(dt), 'MM/dd/yyyy'));\n      }\n      console.log(\"array is:\"+arr);\n      return arr;\n  };\n\n  if(data!=undefined){\n    console.log(\"data is:\"+data);\n    return <Line options={options} data={data} />;\n  }\n  else{\n    return null;\n  }\n }\n\n export default Chart2;"],"mappings":"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"},"metadata":{},"sourceType":"module"}