{"ast":null,"code":"var _jsxFileName = \"/Users/chetnaajaynainani/Desktop/cc/pages/src/pages/chart.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { format } from 'date-fns';\nimport Post from \"../components/Post\";\nimport React from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n/*const Chart = () => {\n  const [setCharts] = useState([]);\n  const [loading, setLoading] = useState(true);\n\t\n\tuseEffect(() => {\n    fetch(\"https://workers.cnainani.workers.dev/attack-layer3\", { mode: \"cors\" })\n      .then((response) => {\n        console.log(\"response is:\"+response);\n        return response.json();\n      })\n      .then((data) => {\n        //setCharts(data);\n        //setLoading(false);\n        //console.log(data);\n        //console.log(\"meta is:\"+ JSON.stringify(data.data.meta));\n        let startTime=data.data.meta.dateRange.startTime.split('T')[0]+'\"';\n        let endTime=data.data.meta.dateRange.endTime.split('T')[0]+'\"';\n        //console.log(\"startTime:\"+ startTime.split('T')[0]+'\"');\n        //console.log(\"endTime is:\"+endTime.split('T')[0]+'\"');\n        console.log(\"getDates is:\"+getDaysArray(startTime,endTime));\n       // console.log(\"formatted start date is:\"+ formatDate(startTime));\n       // console.log(\"formatted end date is:\"+ formatDate(endTime));\n        \n      });\n\n      function formatDate(string){\n        var options = { year: 'numeric', month: 'long', day: 'numeric' };\n        return new Date(string).toLocaleDateString([],options);\n    }\n\n      var getDaysArray = function(start, end) {\n        for(var arr=[],dt=new Date(start); \n          dt<=new Date(end); \n          dt.setDate(dt.getDate()+1)){\n            console.log(\"date pushed is:\"+ format(new Date(dt), 'MM/dd/yyyy'));\n            arr.push(format(new Date(dt), 'MM/dd/yyyy'));\n        }\n        console.log(\"array is:\"+arr);\n        return arr;\n    };\n\n  });\n\n  if (loading) {\n    return <Container>loading screen</Container>;\n  }\n  return (\n    <Container>\n      {posts.map((e) => (\n        <Post data={e}></Post>\n      ))}\n    </Container>\n  );\n};*/\n\nconst Chart2 = () => {\n  _s();\n  const [content, setContent] = useState([]);\n  const [loading, setLoading] = useState(true);\n  var labels, data, arrChart;\n  const options = {\n    responsive: true,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Chart.js Line Chart'\n      }\n    }\n  };\n  useEffect(() => {\n    fetch(\"https://workers.cnainani.workers.dev/attack-layer3\", {\n      mode: \"cors\"\n    }).then(response => {\n      console.log(\"response is:\" + response);\n      return response.json();\n    }).then(dataRes => {\n      setLoading(false);\n      let startTime = dataRes.data.meta.dateRange.startTime.split('T')[0] + '\"';\n      let endTime = dataRes.data.meta.dateRange.endTime.split('T')[0] + '\"';\n      arrChart = getDaysArray(startTime, endTime);\n      labels = [arrChart];\n      console.log(\"lables are:\" + arrChart[0]);\n      data = {\n        labels,\n        datasets: [{\n          label: 'Dataset 1',\n          data: arrChart[0],\n          borderColor: 'rgb(255, 99, 132)',\n          backgroundColor: 'rgba(255, 99, 132, 0.5)'\n        }, {\n          label: 'Dataset 2',\n          data: arrChart[1],\n          borderColor: 'rgb(53, 162, 235)',\n          backgroundColor: 'rgba(53, 162, 235, 0.5)'\n        }]\n      };\n      setContent(data);\n      console.log(\"data inside is:\" + JSON.stringify(data));\n      //return <Line options={options} data={data} />;\n    });\n\n    var getDaysArray = function (start, end) {\n      for (var arr = [], dt = new Date(start); dt <= new Date(end); dt.setDate(dt.getDate() + 1)) {\n        console.log(\"date pushed is:\" + format(new Date(dt), 'MM/dd/yyyy'));\n        arr.push(format(new Date(dt), 'MM/dd/yyyy'));\n      }\n      console.log(\"array is:\" + arr);\n      return arr;\n    };\n  });\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: \"loading screen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 8\n    }, this), \";\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s(Chart2, \"1BcwpdEse31aNgYBA8m0JPdI1cM=\");\n_c = Chart2;\nexport default Chart2;\nvar _c;\n$RefreshReg$(_c, \"Chart2\");","map":{"version":3,"names":["useEffect","useState","Container","format","Post","React","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","register","Chart2","content","setContent","loading","setLoading","labels","data","arrChart","options","responsive","plugins","title","display","text","fetch","mode","then","response","console","log","json","dataRes","startTime","meta","dateRange","split","endTime","getDaysArray","datasets","label","borderColor","backgroundColor","JSON","stringify","start","end","arr","dt","Date","setDate","getDate","push"],"sources":["/Users/chetnaajaynainani/Desktop/cc/pages/src/pages/chart.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { format } from 'date-fns'\nimport Post from \"../components/Post\";\nimport React from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n/*const Chart = () => {\n  const [setCharts] = useState([]);\n  const [loading, setLoading] = useState(true);\n\t\n\tuseEffect(() => {\n    fetch(\"https://workers.cnainani.workers.dev/attack-layer3\", { mode: \"cors\" })\n      .then((response) => {\n        console.log(\"response is:\"+response);\n        return response.json();\n      })\n      .then((data) => {\n        //setCharts(data);\n        //setLoading(false);\n        //console.log(data);\n        //console.log(\"meta is:\"+ JSON.stringify(data.data.meta));\n        let startTime=data.data.meta.dateRange.startTime.split('T')[0]+'\"';\n        let endTime=data.data.meta.dateRange.endTime.split('T')[0]+'\"';\n        //console.log(\"startTime:\"+ startTime.split('T')[0]+'\"');\n        //console.log(\"endTime is:\"+endTime.split('T')[0]+'\"');\n        console.log(\"getDates is:\"+getDaysArray(startTime,endTime));\n       // console.log(\"formatted start date is:\"+ formatDate(startTime));\n       // console.log(\"formatted end date is:\"+ formatDate(endTime));\n        \n      });\n\n      function formatDate(string){\n        var options = { year: 'numeric', month: 'long', day: 'numeric' };\n        return new Date(string).toLocaleDateString([],options);\n    }\n\n      var getDaysArray = function(start, end) {\n        for(var arr=[],dt=new Date(start); \n          dt<=new Date(end); \n          dt.setDate(dt.getDate()+1)){\n            console.log(\"date pushed is:\"+ format(new Date(dt), 'MM/dd/yyyy'));\n            arr.push(format(new Date(dt), 'MM/dd/yyyy'));\n        }\n        console.log(\"array is:\"+arr);\n        return arr;\n    };\n\n  });\n\n  if (loading) {\n    return <Container>loading screen</Container>;\n  }\n  return (\n    <Container>\n      {posts.map((e) => (\n        <Post data={e}></Post>\n      ))}\n    </Container>\n  );\n};*/\n\n\nconst Chart2 = () => {\n  const [content, setContent] = useState([]);\n  const [loading, setLoading] = useState(true);\n  var labels,data,arrChart;\n  const options = {\n    responsive: true,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Chart.js Line Chart',\n      },\n    },\n  };\n  \n\tuseEffect(() => {\n    fetch(\"https://workers.cnainani.workers.dev/attack-layer3\", { mode: \"cors\" })\n    .then((response) => {\n      console.log(\"response is:\"+response);\n      return response.json();\n    })  \n    .then((dataRes) => {\n      setLoading(false);\n        let startTime=dataRes.data.meta.dateRange.startTime.split('T')[0]+'\"';\n        let endTime=dataRes.data.meta.dateRange.endTime.split('T')[0]+'\"';\n        arrChart=getDaysArray(startTime,endTime);\n        labels = [arrChart];\n        console.log(\"lables are:\"+arrChart[0]);\n        data = {\n          labels,\n          datasets: [\n            {\n              label: 'Dataset 1',\n              data: arrChart[0],\n              borderColor: 'rgb(255, 99, 132)',\n              backgroundColor: 'rgba(255, 99, 132, 0.5)',\n            },\n            {\n              label: 'Dataset 2',\n              data: arrChart[1],\n              borderColor: 'rgb(53, 162, 235)',\n              backgroundColor: 'rgba(53, 162, 235, 0.5)',\n            },\n          ],\n        };\n        setContent(data);\n        console.log(\"data inside is:\"+JSON.stringify(data));\n        //return <Line options={options} data={data} />;\n    });\n    var getDaysArray = function(start, end) {\n        for(var arr=[],dt=new Date(start); \n          dt<=new Date(end); \n          dt.setDate(dt.getDate()+1)){\n            console.log(\"date pushed is:\"+ format(new Date(dt), 'MM/dd/yyyy'));\n            arr.push(format(new Date(dt), 'MM/dd/yyyy'));\n        }\n        console.log(\"array is:\"+arr);\n        return arr;\n    };\n\n  });\n\n  if (loading) {\n    return <Container>loading screen</Container>;\n  }\n  return (\n    <Container>\n       <Line options={options} data={content} />;\n    </Container>\n  );\n};\n \n\n export default Chart2;"],"mappings":"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"},"metadata":{},"sourceType":"module"}